# container-friendly
pid /tmp/nginx.pid;

worker_processes auto;

events { worker_connections 1024; }

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  sendfile      on;
  server_tokens off;

  # ---- Logging to Docker (stdout/stderr) ----
  log_format json_combined escape=json
  '{
      "time": "$time_iso8601",
      "remote_addr": "$remote_addr",
      "request": "$request",
      "status":$status,
      "bytes":$body_bytes_sent,
      "referer": "$http_referer",
      "user_agent": "$http_user_agent",
      "xff": "$http_x_forwarded_for",
      "host": "$host",
      "req_time":$request_time,
      "upstream_addr": "$upstream_addr",
      "upstream_status": "$upstream_status",
      "upstream_time": "$upstream_response_time"
}';

  access_log /dev/stdout json_combined buffer=64k flush=1s;
  error_log  /dev/stderr warn;

  # ---- Temp/cache paths go under /tmp so parents exist in minimal images ----
  client_body_temp_path /tmp/client_temp;
  proxy_temp_path       /tmp/proxy_temp;
  fastcgi_temp_path     /tmp/fastcgi_temp;
  uwsgi_temp_path       /tmp/uwsgi_temp;
  scgi_temp_path        /tmp/scgi_temp;

  # ---- HTTP: health only, redirect everything else to HTTPS ----
  server {
    listen 80;
    server_name _;

    # Quiet health endpoint
    location = /health {
      add_header Content-Type text/plain;
      access_log off;
      return 200 "ok\n";
    }

    location / {
      return 301 https://$host$request_uri;
    }
  }

  # ---- HTTPS ----
  server {
    listen 8443 ssl http2;   # http2 enabled here
    server_name _;

    ssl_certificate     /etc/nginx/https_certs/https.crt;
    ssl_certificate_key /etc/nginx/https_certs/https.key;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;

    # Security headers (HTTPS only)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "DENY" always;
    add_header Referrer-Policy "no-referrer" always;

    # HTTPS health (quiet)
    location = /health {
      add_header Content-Type text/plain;
      access_log off;
      return 200 "ok\n";
    }

    # Published Entity Statement (compact JWS)
    # Serve the single file at /srv/www/.well-known/openid-federation
    location = /.well-known/openid-federation {
      default_type application/entity-statement+jwt;
      root /srv/www;                                  # -> /srv/www/.well-known/openid-federation
      try_files /.well-known/openid-federation =404;  # exact file only
      add_header Cache-Control "no-store";
    }
  }
}
